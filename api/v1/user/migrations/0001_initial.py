# Generated by Django 4.0.2 on 2022-02-20 19:05

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('storage', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('finance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('time_created', models.DateTimeField(auto_now_add=True, verbose_name="Qo'shilgan sana")),
                ('time_updated', models.DateTimeField(auto_now=True, verbose_name='Yangilangan sana')),
                ('role', models.CharField(choices=[('Direktor', 'Direktor'), ("Sotuv boshlig'i", "Sotuv boshlig'i"), ('Sotuv meneger', 'Sotuv meneger'), ('Omborchi', 'Omborchi'), ("Ta'minotchi", "Ta'minotchi"), ('Texnolog', 'Texnolog'), ("Seh boshlig'i", "Seh boshlig'i"), ('Nazoratchi', 'Nazoratchi'), ('Kassir', 'Kassir')], max_length=255, verbose_name='Lavozim')),
                ('first_name', models.CharField(max_length=255, verbose_name='Ism')),
                ('last_name', models.CharField(max_length=255, verbose_name='Familiya')),
                ('second_name', models.CharField(blank=True, max_length=255, verbose_name='Otasining ismi')),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message="Telefon raqami mana bunday bo'lishi kerak: `998901234567`", regex='^((\\+998)|(998))\\d{9}$')], verbose_name='Telefon raqami')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Yashash manzili')),
                ('salary', models.PositiveIntegerField(default=0, verbose_name='Maosh')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/%y/%m/%d', verbose_name='Rasmi')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='finance.currency', verbose_name='Valyuta')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('storages', models.ManyToManyField(to='storage.Storage', verbose_name='Omborlar')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Foydalanuvchi',
                'verbose_name_plural': 'Foydalanuvchilar',
            },
        ),
    ]
